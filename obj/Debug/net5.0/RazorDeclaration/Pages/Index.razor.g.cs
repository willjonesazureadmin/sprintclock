// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ticktocksprintclock.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\wjones\source\repos\ticktocksprintclock\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\wjones\source\repos\ticktocksprintclock\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\wjones\source\repos\ticktocksprintclock\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\wjones\source\repos\ticktocksprintclock\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\wjones\source\repos\ticktocksprintclock\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\wjones\source\repos\ticktocksprintclock\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\wjones\source\repos\ticktocksprintclock\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\wjones\source\repos\ticktocksprintclock\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\wjones\source\repos\ticktocksprintclock\_Imports.razor"
using ticktocksprintclock;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\wjones\source\repos\ticktocksprintclock\_Imports.razor"
using ticktocksprintclock.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\wjones\source\repos\ticktocksprintclock\Pages\Index.razor"
using Microsoft.AspNetCore.WebUtilities;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 149 "C:\Users\wjones\source\repos\ticktocksprintclock\Pages\Index.razor"
       

    private string _projectName = "My Project";
    private int _sprintLength = 7;
    private int _numberOfSprints = 8;

    private int _currentSprint;

    private int _daysLeftInProject;
    private int _workingDayLeftInProject;
    private double _workingHoursLeftInSprint;
    private int _workingHoursInDay = 8;

    private int _workingDaysInWeek = 5;

    private string _link;

    private DateTime _projectStartDate;
    private DateTime _projectEndDate;
    private DateTime _sprintStartDate;
    private DateTime _sprintEndDate;
    private TimeSpan _sprintClock;



    private bool showEdit;
    private bool showAdvanced;

    private bool showLink;


    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if (queryStrings.TryGetValue("name", out var a))
        {
            _projectName = a;
        }
        else
        {
            _projectName = "My Project";
        }
        if (queryStrings.TryGetValue("sprintLength", out var b))
        {
            int.TryParse(b, out var valueOfInt);
            _sprintLength = valueOfInt;
        }
        if (queryStrings.TryGetValue("numberofsprints", out var c))
        {
            int.TryParse(c, out var valueOfInt);
            _numberOfSprints = valueOfInt;
        }
        if (queryStrings.TryGetValue("hoursinday", out var e))
        {
            int.TryParse(e, out var valueOfInt);
            _workingHoursInDay = valueOfInt;
        }
        if (queryStrings.TryGetValue("daysinweek", out var f))
        {
            int.TryParse(f, out var valueOfInt);
            _workingDaysInWeek = valueOfInt;
        }
        if (queryStrings.TryGetValue("startdate", out var d))
        {
            DateTime.TryParse(d, out var valueOfDate);
            _projectStartDate = valueOfDate;
        }
        else
        {
            _projectStartDate = DateTime.Today.AddDays(-14);
        }


        try
        {
            CalculateDates();
            SprintClock();
        }
        catch
        {

        }
    }

    private void CalculateDates()
    {
        _currentSprint = (DateTime.Today.Subtract(_projectStartDate).Days / _sprintLength);
        _sprintStartDate = _projectStartDate.AddDays(_currentSprint * _sprintLength);
        _sprintEndDate = _sprintStartDate.AddDays(_sprintLength).AddTicks(-1);
        _projectEndDate = _projectStartDate.AddDays(_sprintLength * _numberOfSprints);
        _daysLeftInProject = (_projectEndDate - DateTime.Now).Days;
        _workingDayLeftInProject = ((_projectEndDate - DateTime.Now).Days / 7) * _workingDaysInWeek;
        _workingHoursLeftInSprint = ((((_sprintEndDate - DateTime.Now).TotalHours) / 24) * _workingHoursInDay);
    }

    private void btnEdit()
    {
        showEdit = true;
        StateHasChanged();
    }

    private void btnGenerateLink()
    {
        showLink = true;
        var u = NavManager.BaseUri;
        u = QueryHelpers.AddQueryString(u, "name", _projectName);
        u = QueryHelpers.AddQueryString(u, "sprintLength", _sprintLength.ToString());
        u = QueryHelpers.AddQueryString(u, "numberofsprints", _numberOfSprints.ToString());
        u = QueryHelpers.AddQueryString(u, "startdate", _projectStartDate.ToString());
        u = QueryHelpers.AddQueryString(u, "hoursinday", _workingHoursInDay.ToString());
        u = QueryHelpers.AddQueryString(u, "daysinweek", _workingDaysInWeek.ToString());
        _link = u;
        StateHasChanged();
    }

    private void btnRecalculate()
    {
        showEdit = false;
        showAdvanced = false;
        CalculateDates();
    }


    private void btnAdvanced()
    {
        showAdvanced = true;
        StateHasChanged();
    }

    async Task SprintClock()
    {
        while (_sprintEndDate > DateTime.Now)
        {
            await Task.Delay(1000);

            _sprintClock = (_sprintEndDate - DateTime.Now);
            StateHasChanged();
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
    }
}
#pragma warning restore 1591
